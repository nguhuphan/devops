apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx
  namespace: dev
---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx
  namespace: dev
rules:
- apiGroups:
  - ""
  resources:
  - ""
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx
subjects:
- kind: ServiceAccount
  name: nginx
  namespace: dev
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: check-secrets
  namespace: dev
data: 
  check-secrets.sh: |
    apt-get update -y
    apt-get install curl -y
    # Read mounted files
    KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)
    NAMESPACE=$(</var/run/secrets/kubernetes.io/serviceaccount/namespace)
    RESOURCE=secrets
    curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/$RESOURCE
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: dev
  labels:
    app: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        #kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: nginx
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80    
        volumeMounts:
        - name: fileshare
          mountPath: /usr/share/nginx/html
        - name: check-secrets
          mountPath: /scripts
        #command: ["/bin/sh", "-c", "/scripts/check-secrets.sh"]
      volumes:
        - name: fileshare
          persistentVolumeClaim:
            claimName: nginx-pvc
        - name: check-secrets
          configMap:
            name: check-secrets
            defaultMode: 0744
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: dev
spec:
  ports:
  - name: nginx
    port: 80
  selector:
    app: nginx

